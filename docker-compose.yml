version: "3.8"

services:
  postgres_srm:
    image: postgres:13.1-alpine
    container_name: postgres_srm
    volumes:
      - ./dump.sql:/docker-entrypoint-initdb.d/dump.sql
    expose:
      - 5432
    ports:
      - 5432:5432
    environment:
      - POSTGRES_PASSWORD=q7963q
      - POSTGRES_USER=postgres
      - POSTGRES_DB=srm_kingdom
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d srm_kingdom"]
      interval: 5s
      retries: 5
      timeout: 3s
    networks:
      - srm-network
         
  rabbitmq_srm:
    image: rabbitmq:3.9-management
    container_name: rabbitmq_srm
    expose:
      - 5672
      - 15672
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    networks:
      - srm-network

  srm_api:
    image: srm_api:0.1
    build:
      context: ./srm_api
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_srm:5432/srm_kingdom
      - SPRING_RABBITMQ_HOST=rabbitmq_srm
      - SPRING_RABBITMQ_PORT=5672
      - SPRING_RABBITMQ_USERNAME=guest
      - SPRING_RABBITMQ_PASSWORD=guest
    depends_on:
      - postgres_srm
      - rabbitmq_srm
    container_name: srm_api
    expose:
      - 8080
    ports:
      - 8080:8080
    networks:
      - srm-network

volumes:
  postgres-data:

networks:
  srm-network:
    driver: bridge

# docker compose up -d
