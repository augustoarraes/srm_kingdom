package com.srmasset.api.services;

import java.util.List;
import java.util.UUID;

import javax.transaction.Transactional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.srmasset.api.models.ProdutoModel;
import com.srmasset.api.models.TaxaCambioModel;
import com.srmasset.api.models.TransacaoModel;
import com.srmasset.api.repositories.ProdutoRepository;
import com.srmasset.api.repositories.TaxaCambioRepository;
import com.srmasset.api.repositories.TransacaoRepository;

import java.util.Optional;

@Service
public class TaxaCambioService {
	
	final TaxaCambioRepository taxacambioRepository;
	final ProdutoRepository produtoRepository;
    final TransacaoRepository transacaoRepository; 
	
	public TaxaCambioService(TaxaCambioRepository taxacambioRepository) {
		this.taxacambioRepository = taxacambioRepository;
		this.produtoRepository = null;
		this.transacaoRepository = null;
	}
	
	@Transactional
	public TaxaCambioModel save(TaxaCambioModel produtoModel) {
		return taxacambioRepository.save(produtoModel);
	}

	public List<TaxaCambioModel> findAll() {
		return taxacambioRepository.findAll();
	}

	public Optional<TaxaCambioModel> findByid(long id) {
		return taxacambioRepository.findById(id);
	}
	
	public List<TaxaCambioModel> findByIdMoedaOrigem(long idMoedaOrigem){
		return taxacambioRepository.findByIdMoedaOrigem(idMoedaOrigem);
	}

	@Transactional
	public void delete(TaxaCambioModel produtoModel) {
		taxacambioRepository.delete(produtoModel);
	}

	public double converterMoeda(long idProduto, long idMoedaDestino, double quantidade) {
        // aqui busca o produto e sua moeda de origem
        Optional<ProdutoModel> produtoOptional = produtoRepository.findById(idProduto);
        if (!produtoOptional.isPresent()) {
            throw new RuntimeException("Produto não encontrado");
        }
        ProdutoModel produto = produtoOptional.get();
        long idMoedaOrigem = produto.getIdMoedaRef();

        // depois busca a taxa de cambio correspondente
        Optional<TaxaCambioModel> taxaOptional = taxacambioRepository.findByIdMoedaOrigemAndIdMoedaDestino(idMoedaOrigem, idMoedaDestino);
        if (!taxaOptional.isPresent()) {
            throw new RuntimeException("Taxa de câmbio não encontrada");
        }
        double taxaCambio = taxaOptional.get().getValorTaxa();

        // calcula a conversão
        double valorConvertido = quantidade * taxaCambio;

        // registra a transação no banco
        TransacaoModel transacao = new TransacaoModel();
        transacao.setIdProduto(idProduto);
        transacao.setIdMoedaOrigem(idMoedaOrigem);
        transacao.setIdMoedaDestino(idMoedaDestino);
        transacao.setValorFinal(valorConvertido);
        transacaoRepository.save(transacao);

        return valorConvertido;
    }

}
